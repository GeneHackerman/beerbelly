{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","saveBookIds","bookIdArr","length","JSON","stringify","removeBookId","bookId","savedBookIds","parse","updatedSavedBookIds","filter","savedBookId","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","useMutation","saveBook","handleFormSubmit","error","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","input","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","userData","me","removeBook","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.570b7bce.chunk.js","sourcesContent":["import decode from 'jwt-decode';\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import gql from \"graphql-tag\";\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $password: String!, $email: String!) {\n    addUser(username: $username, password: $password, email: $email) {\n      token\n      user {\n        username\n        _id\n        email\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($input: SavedBookInput) {\n    saveBook(input: $input) {\n      username\n      _id\n      bookCount\n      savedBooks {\n        bookId\n        authors\n        image\n        link\n        title\n        description\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: String!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      bookCount\n      savedBooks {\n        bookId\n        authors\n        image\n        link\n        title\n        description\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nconst SearchBooks = () => {\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  useEffect(() => {\n    return () => {\n      saveBookIds(savedBookIds);\n    };\n  });\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"Ops! Something went wrong. Please try again!\");\n      }\n      const { items } = await response.json();\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"Sorry! There's no Author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const handleSaveBook = async (bookId) => {\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const response = await saveBook({\n        variables: {\n          input: bookToSave,\n        },\n      });\n      if (!response) {\n        throw new Error(\"Ops! Something went wrong. Please try again!\");\n      }\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Book Search</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Type the name of a book or author here\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Search Now\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved.\"\n                        : \"Save this Book.\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\nexport default SearchBooks;\n","export const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from \"graphql-tag\";\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      savedBooks {\n        title\n        bookId\n        authors\n        description\n        image\n        link\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId, saveBookIds } from \"../utils/localStorage\";\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || [];\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const response = await removeBook({\n        variables: { bookId: bookId },\n      });\n\n      if (!response) {\n        throw new Error(\"Ops! Invalid ID. Please try a differet ID. \");\n      }\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(error);\n    }\n  };\n  if (loading) {\n    return <h2>We are now LOADING...</h2>;\n  }\n  const savedBookIds = userData.savedBooks.map((book) => book.bookId);\n  saveBookIds(savedBookIds);\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"No Saved books so far!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete Book\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nconst SignupForm = () => {\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error }] = useMutation(ADD_USER);\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(error);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something is wrong with your signup! Please try signing up again.\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Your Username is required to sign up!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Your Email is required to sign up!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Your Password is required to sign up!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\n// import { loginUser } from '../utils/API';\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [login, { error }] = useMutation(LOGIN_USER);\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(error);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport Auth from '../utils/auth';\nconst AppNavbar = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Book Search using MERNStack - MongoDB, the Apollo server and Nodejs.\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    Check Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={SearchBooks} />\n            <Route exact path=\"/saved\" component={SavedBooks} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}