{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretsshhhhh';\nconst expiration = '4h';\nmodule.exports = {\n  authMiddleware: function (req, res, next) {\n    let token = req.query.token || req.headers.authorization;\n\n    if (req.headers.authorization) {\n      token = token.split(' ').pop().trim();\n    }\n\n    if (!token) {\n      return res.status(400).json({\n        message: 'You have no token!'\n      });\n    }\n\n    try {\n      const {\n        data\n      } = jwt.verify(token, secret, {\n        maxAge: expiration\n      });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n      return res.status(400).json({\n        message: 'invalid token!'\n      });\n    }\n\n    next();\n  },\n  signToken: function (_ref) {\n    let {\n      username,\n      email,\n      _id\n    } = _ref;\n    const payload = {\n      username,\n      email,\n      _id\n    };\n    return jwt.sign({\n      data: payload\n    }, secret, {\n      expiresIn: expiration\n    });\n  }\n};","map":{"version":3,"names":["jwt","require","secret","expiration","module","exports","authMiddleware","req","res","next","token","query","headers","authorization","split","pop","trim","status","json","message","data","verify","maxAge","user","console","log","signToken","username","email","_id","payload","sign","expiresIn"],"sources":["/Users/coopersmith/Desktop/class-challenges/beerbelly/brewers/client/src/utils/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst secret = 'mysecretsshhhhh';\r\nconst expiration = '4h';\r\nmodule.exports = {\r\n  authMiddleware: function (req, res, next) {\r\n    let token = req.query.token || req.headers.authorization;\r\n    if (req.headers.authorization) {\r\n      token = token.split(' ').pop().trim();\r\n    }\r\n\r\n    if (!token) {\r\n      return res.status(400).json({ message: 'You have no token!' });\r\n    }\r\n\r\n    try {\r\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\r\n      req.user = data;\r\n    } catch {\r\n      console.log('Invalid token');\r\n      return res.status(400).json({ message: 'invalid token!' });\r\n    }\r\n\r\n    next();\r\n  },\r\n  signToken: function ({ username, email, _id }) {\r\n    const payload = { username, email, _id };\r\n\r\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\r\n  },\r\n\r\n  \r\n\r\n};\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,MAAM,GAAG,iBAAf;AACA,MAAMC,UAAU,GAAG,IAAnB;AACAC,MAAM,CAACC,OAAP,GAAiB;EACfC,cAAc,EAAE,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;IACxC,IAAIC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAUD,KAAV,IAAmBH,GAAG,CAACK,OAAJ,CAAYC,aAA3C;;IACA,IAAIN,GAAG,CAACK,OAAJ,CAAYC,aAAhB,EAA+B;MAC7BH,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,GAAuBC,IAAvB,EAAR;IACD;;IAED,IAAI,CAACN,KAAL,EAAY;MACV,OAAOF,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;QAAEC,OAAO,EAAE;MAAX,CAArB,CAAP;IACD;;IAED,IAAI;MACF,MAAM;QAAEC;MAAF,IAAWpB,GAAG,CAACqB,MAAJ,CAAWX,KAAX,EAAkBR,MAAlB,EAA0B;QAAEoB,MAAM,EAAEnB;MAAV,CAA1B,CAAjB;MACAI,GAAG,CAACgB,IAAJ,GAAWH,IAAX;IACD,CAHD,CAGE,MAAM;MACNI,OAAO,CAACC,GAAR,CAAY,eAAZ;MACA,OAAOjB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;QAAEC,OAAO,EAAE;MAAX,CAArB,CAAP;IACD;;IAEDV,IAAI;EACL,CApBc;EAqBfiB,SAAS,EAAE,gBAAoC;IAAA,IAA1B;MAAEC,QAAF;MAAYC,KAAZ;MAAmBC;IAAnB,CAA0B;IAC7C,MAAMC,OAAO,GAAG;MAAEH,QAAF;MAAYC,KAAZ;MAAmBC;IAAnB,CAAhB;IAEA,OAAO7B,GAAG,CAAC+B,IAAJ,CAAS;MAAEX,IAAI,EAAEU;IAAR,CAAT,EAA4B5B,MAA5B,EAAoC;MAAE8B,SAAS,EAAE7B;IAAb,CAApC,CAAP;EACD;AAzBc,CAAjB"},"metadata":{},"sourceType":"module"}