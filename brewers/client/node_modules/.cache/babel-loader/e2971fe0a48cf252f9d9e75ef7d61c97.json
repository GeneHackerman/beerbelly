{"ast":null,"code":"var jwt=require('jsonwebtoken');var secret='mysecretsshhhhh';var expiration='4h';module.exports={authMiddleware:function authMiddleware(req,res,next){var token=req.query.token||req.headers.authorization;if(req.headers.authorization){token=token.split(' ').pop().trim();}if(!token){return res.status(400).json({message:'You have no token!'});}try{var _jwt$verify=jwt.verify(token,secret,{maxAge:expiration}),data=_jwt$verify.data;req.user=data;}catch(_unused){console.log('Invalid token');return res.status(400).json({message:'invalid token!'});}next();},signToken:function signToken(_ref){var username=_ref.username,email=_ref.email,_id=_ref._id;var payload={username:username,email:email,_id:_id};return jwt.sign({data:payload},secret,{expiresIn:expiration});}};","map":{"version":3,"sources":["C:/Users/drmic/desktop/myrepo/beerbelly/brewers/client/src/utils/auth.js"],"names":["jwt","require","secret","expiration","module","exports","authMiddleware","req","res","next","token","query","headers","authorization","split","pop","trim","status","json","message","verify","maxAge","data","user","console","log","signToken","username","email","_id","payload","sign","expiresIn"],"mappings":"AAAA,GAAMA,CAAAA,GAAG,CAAGC,OAAO,CAAC,cAAD,CAAnB,CACA,GAAMC,CAAAA,MAAM,CAAG,iBAAf,CACA,GAAMC,CAAAA,UAAU,CAAG,IAAnB,CACAC,MAAM,CAACC,OAAP,CAAiB,CACfC,cAAc,CAAE,wBAAUC,GAAV,CAAeC,GAAf,CAAoBC,IAApB,CAA0B,CACxC,GAAIC,CAAAA,KAAK,CAAGH,GAAG,CAACI,KAAJ,CAAUD,KAAV,EAAmBH,GAAG,CAACK,OAAJ,CAAYC,aAA3C,CACA,GAAIN,GAAG,CAACK,OAAJ,CAAYC,aAAhB,CAA+B,CAC7BH,KAAK,CAAGA,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,GAAuBC,IAAvB,EAAR,CACD,CAED,GAAI,CAACN,KAAL,CAAY,CACV,MAAOF,CAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAEC,OAAO,CAAE,oBAAX,CAArB,CAAP,CACD,CAED,GAAI,iBACenB,GAAG,CAACoB,MAAJ,CAAWV,KAAX,CAAkBR,MAAlB,CAA0B,CAAEmB,MAAM,CAAElB,UAAV,CAA1B,CADf,CACMmB,IADN,aACMA,IADN,CAEFf,GAAG,CAACgB,IAAJ,CAAWD,IAAX,CACD,CAAC,cAAM,CACNE,OAAO,CAACC,GAAR,CAAY,eAAZ,EACA,MAAOjB,CAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAEC,OAAO,CAAE,gBAAX,CAArB,CAAP,CACD,CAEDV,IAAI,GACL,CApBc,CAqBfiB,SAAS,CAAE,wBAAoC,IAAxBC,CAAAA,QAAwB,MAAxBA,QAAwB,CAAdC,KAAc,MAAdA,KAAc,CAAPC,GAAO,MAAPA,GAAO,CAC7C,GAAMC,CAAAA,OAAO,CAAG,CAAEH,QAAQ,CAARA,QAAF,CAAYC,KAAK,CAALA,KAAZ,CAAmBC,GAAG,CAAHA,GAAnB,CAAhB,CAEA,MAAO7B,CAAAA,GAAG,CAAC+B,IAAJ,CAAS,CAAET,IAAI,CAAEQ,OAAR,CAAT,CAA4B5B,MAA5B,CAAoC,CAAE8B,SAAS,CAAE7B,UAAb,CAApC,CAAP,CACD,CAzBc,CAAjB","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst secret = 'mysecretsshhhhh';\r\nconst expiration = '4h';\r\nmodule.exports = {\r\n  authMiddleware: function (req, res, next) {\r\n    let token = req.query.token || req.headers.authorization;\r\n    if (req.headers.authorization) {\r\n      token = token.split(' ').pop().trim();\r\n    }\r\n\r\n    if (!token) {\r\n      return res.status(400).json({ message: 'You have no token!' });\r\n    }\r\n\r\n    try {\r\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\r\n      req.user = data;\r\n    } catch {\r\n      console.log('Invalid token');\r\n      return res.status(400).json({ message: 'invalid token!' });\r\n    }\r\n\r\n    next();\r\n  },\r\n  signToken: function ({ username, email, _id }) {\r\n    const payload = { username, email, _id };\r\n\r\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}